// Строгий режим
"use strict"

// ЩО ТАКЄ JS

/*
Що такє JS - мультипарадигмена, динамічно типізована,
мава програмуванная.
*/
/*
Будь-яка программа це певна послідовність
інструкцій (команд)

інструкції можуть містити:
Значення
Оператори
Вирази
Ключові слова
Коментарі
*/

// СИНТАКСИС

// Коментар
/*
Коментар
Коментар
Коментар
*/

/*
Причиною ДУЖЕ багатьох невдач є - неуважність!
*/

//Правило синтаксису №0
/*
ВСЕ що відкрито має бути закрито
ВСЕ що закрито має бути відкрито
*/

//Правило синтаксису №1 (порада)
/*
Після КОЖНОЇ інструкції ставьте крапку з комою (;)
*/

//Правило синтаксису №2

/*
Мова JS чутлива до регістру!
*/


// ЗМІННІ ТА КОНСТАНТИ


/*
Змінна - це певний контейнер, який може зберігати якісь данні.
let - об'являє зміну. Потрібне тільки в момент об'яви змінної
*/
// Анатомія:
// let і'мя_змінної;

// І'мя змінної
/*
    0) має відповідати данний які містить змінна, або буде містити
    1) латиниця (вкрай рекомендовано)
    2) букви, цифри, символи $ та _
    3) не може починатись з цифри
    4) не може дорівнювати одному з ключевих слів (зарезервованих)
    5) Стиль - lowerCameCase
*/

// Не може бути двух однакових змінних в одній області видимості


// Привласнення значення

// Відразу, в момент об'яви
/*
let userAge = 30;

console.log(userAge); - виводить данні у консоль
*/

// Потім, в процесі програми
// let userAge;
//...інший код...
//...інший код...
//...інший код...
// userAge = 30; let вже не потрібен

// Змінна значення
// let userAge = 29;
// console.log(userAge);

// userAge = 30; // let вже не потрібен
// console.log(userAge);
/*
let userAge = 29;
console.log(userAge);
//...інший код...
//...інший код...

// Динамічна типизація в дії
userAge = 'Я Назар'; // let вже не потрібен
console.log(userAge);
*/

// Копіювання значення
/*
let userAge = 30;
console.log(userAge);
let userAge2;
console.log(userAge2);

userAge2 = userAge; // let вже не потрібен
console.log(userAge2);
console.log(userAge);
*/

// Область видимості

/*
    1) Не можна використовувати змінну (let) до її об'яви4
    2) Змінну "видно" в межах блоку де вона об'явлена та в усіх дочірніх
*/
/*
let userAge = 29;
// Тут ми за межами блоку
if (1 > 0) {  // Це JS-блок
    let userAge = 30;
    console.log(userAge);
    // Тут межі блоку
    if (10 > 4) {// Це JS-блок
        console.log(userAge);
        // Тут межі блоку
    }
}

console.log(userAge);
// Тут ми за межами блоку
*/
// Робота зі змінними ззовні
/*
let num;
if (10 > 5) {
    num = 20;
}
console.log(num);
*/

// КОНСТАНТИ
/*
const userAge = 15;
console.log(userAge);
userAge = 10;
console.log(userAge);
*/

// Якщо значення константи нам відомо заздалегідь
/*
const COLOR_GREY = '#424551';

const userAge = 15 + 5;
console.log(userAge);


console.log(COLOR_GREY);
*/



// ТИПИ ДАННИХ
/*
undefined
null
boolean
string
number
object
*/
// Оператор typeof вертає тип данних

/*
undefined (невизначанність)
let userAge;
console.log(typeof userAge); // Тип даних
console.log(userAge); // Значення
*/

/*
null (пустота, порожнеча)
*/
/*
let userAge = null;
console.log(typeof userAge); // Тип даних
console.log(userAge); // Значення
*/

/*
number - число (не велике), та спец. значення
*/
/*
let userAge = 0;
console.log(typeof userAge); // Тип даних
console.log(userAge); // Значення
*/
/*
// Infinity - нескінченність
let result = 10 / 0;
console.log(typeof result); // Тип даних
console.log(result); // Значення
*/

/*
// NaN - обчислення не може бути виконано
let result = "Жека" * 10;
console.log(typeof result); // Тип даних
console.log(result); // Значення
*/

/*
string - рядки
*/
/*
let myAge = 30;
let myName = 'Назар';
console.log(typeof myName); // Тип даних
console.log(myName); // Значення
console.log(typeof myAge); // Тип даних
console.log(myAge); // Значення
*/

// Лапки
/*
    1) одинарні - ''
    2) подвійні - ""
    3) зворотні - ``

    Одинарні та подвійні лапки повністю ідентичні.
    Але, якщо відкирта одинарні лапки то закривати
    треба теж одинарною.
*/

/*
const myName = `Назар`;
const myAge = "30";
const myAge2 = "29";
const myInfo = `Ім'я: ${myName}, вік: ${myAge}`;
//console.log(myInfo);
console.log(typeof myAge); // Тип даних
console.log(myAge); // Значення

console.log(myAge + myAge2);
*/

/*
boolean - правда або брехня (true false)
*/
/*
false повернуть: пустий рядок, цифра нуль, undefined, NaN
*/
/*
let someVar;
console.log(typeof Boolean (someVar)); // Тип даних
console.log(Boolean (someVar)); // Значення
*/




/*============================================================================================*/
//=========================================== Домашка =================================================

/*
===== ЗНАЧЕННЯ =====
В JS є декілька типів значень (values):
фіксовані значення (літерали), значення констант та значення змінних.
*/

// Приклади літералів:
/*
25            // літерал цілого числа
23.8          // літерал дробного числа
'JavaScript'  // літерал строки
"JavaScript"  // літерал строки
[]            // літерал масиву
[12, 8, 99]   // літерал масиву
{ }           // літерал об'єкту
{
    name: 'pan',
    surname: 'Nazar'
}               // літерал об'єкту
(ab | cd)       // літерал регулярного вираження
*/

// В мові програмування константи та змінні використовуються
// для збереження значень даних.
/*
const MAX_VALUE = 17;   // константа
var section = 'JS';     // змінна
let arr = ['HTML', 'CSS', 'JS']; // змінна
*/

/*
===== ОПЕРАТОРИ =====
В JS мають дуже багато різних операторів.
Вони означають операцію, яку треба виконтаи.
*/

// Приклад операторів
// * / + - = і так далі.
// console.log('Вчимо' + 'JS');


/*
===== ВИРАЗ =====
Вираз (expression) - це комбінація значень, змінних та операторів, 
які або присваювають значення, або повертають якесь значення 
без його присвоювання.
*/

/*
// Приклади виразів
let num = 4; // вираз присвоювання
console.log(num);
'Вчимо' + 'JS'; //вираз без присвоювання
*/

/*
===== КЛЮЧОВІ СЛОВА =====
Інстркуція JS часто починається з ключового слова (keyword).
Воно (ключове слово) призначене для того, щоб визначити 
яку дію JS необхідно виконати.
*/
/*
// Приклади ключових слів
let num = 'Вчимо JS'; // вказує браузеру створити змінну.
console.log(num);
*/


/*
===== БЛОК ІНСТРУКЦІЇЇ =====
JS інструкціїї можна згуртувати за допомогою так називаємого блока,
по суті фігурних дужок {...}.
Як правило, використовується у функціях, циклах і так далі.


// Приклади блока інструкції
function name() {
    console.log('Вчимо');
    console.log('JS');
}
name();
*/

/*
===== ПРОБІЛИ =====
Рекомендуються додавати пробіли до інструкцій,
щоб зробити код більш читабельним.
JS ігнорує декілько пробілів.
*/
// Наступні рядки еквівалентні:
// let str = 'text';
// let str='text';

/*
Як правило пробіли прийнято
розташовувати навколо операторів:
=, +, -, та /.
*/


/*
===== ДОВЖИНА РЯДКА =====
Для кращого читання коду рекомендується уникати рядків 
з довжиною понад 80 символів. Якщо JS інструкція має велику
довжину, то її бажано розірвати. У більшості випадків 
розрив інструкції краще здійснити після якогось оператора
*/

// Приклад
/*
document.getElementById('text').innerHTML =
    'Текст для якогось поля';
*/


//===================================================================

/* ===== КОНСТАНТИ ===== */
/* 
===== Об'явлення змінної =====
*/

//Ключеві слова для об'яви змінної

/* 
let itsMyLife = 'javascript';

console.log(itsMyLife);
*/


// Оголошення кількох змінних

// У рядок через кому
// let myName = 'Назар', myAge = 30, myMessage = 'Не дзюр проти вітру';

// Через кому з нового рядку
// let myName = 'Назар',
//     myAge = 30,
//     myMessage = 'Не дзюр проти вітру';

// Окремо
// let myName = 'Назар';
//     myAge = 30;
//     myMessage = 'Не дзюр проти вітру';


// Передача значень змінної

// let myAge = 30;
// let myNewAge = 29;

//Копиюємо значеньня змінної myNewAge в змінну myAge

// myAge = myNewAge;
// console.log(myAge);

// USE STRICT та змінні

// "use strict" строгий режим вимкнений

// myAge = 30;
// console.log(myAge);


// ====================================================

// Константа

// Зміна значень у константі
// Об'єкт з даними
// const userProfile = {
//     name: 'Nazario',
//     age: 30,
//     message: 'Поки мені подобається JS, але це поки)))'
// }
// console.log(userProfile);

// // Змінюємо значення одного з полів об'єкта
// userProfile.name = 'Nazar';
// // Помилки немає, а данні змінились
// console.log(userProfile);


//=====================================================

// ===== Ключеве слово VAR ======
// Використовування змінної до її оголошення
/*
age = 30;
console.log(age);

var age
*/

// =======================

let user = 'Vasya';
let userName = 'Вася';

user = userName;
console.log(userName);


// =======================
// Четверте відео
/*
Undefined - невизначений тип
Null - так само як і Undefined містить лише одне значення - null
Boolean - Це булевий чи логічний тип. Може приймати лише два 
значення - true(істина) та false(брехня)

Number - Числовий тип даних представляє значення як вигляді цілих чисел, 
і у вигляді числа з плаваючою точкою. (Infinity, NaN)

BigInt - У JS тип даних "number" не може містити числа більше, ніж 9007199254740991 або менше ніж -9007199254740991
String - рядок
Symbol - 

Object -
Function -
*/
// ========


// let userAge = 30;
// let userInfo = "Franko ${userAge}";
// console.log(userAge);
// console.log(userInfo);

// let userHeight = 145 / 0;
// console.log(userHeight);

// let userNames;
// console.log(typeof userNames);

let userSize = "45" / "8";
console.log(typeof userSize);